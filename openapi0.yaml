openapi: 3.0.0
info:
  title: Swagger Encycl - OpenAPI 3.0
  description: >-
    This is a sample Encycl Store Server based on the OpenAPI 3.0 specification. 
    You can find out more about

    Swagger at [https://swagger.io](https://swagger.io). 

    You can now help us improve the API whether it's by making changes to the
    definition itself or to the code.
    Source links:

    
    - [The source API definition for the Pet
    Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: user
    description: Operations about user
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: Login user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    UserLogin:
      type: object
      properties:
        login:
          type: string
          example: string
        passwd:
          type: string
          example: string
      xml:
        name: userLogin
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        age:
          type: integer
          example: 12
          format: int64
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
        userTopics:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Topic'
        recommended:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Topic'
      xml:
        name: user
    Topic:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 4
        title:
          type: string
          example: "Адронный коллайдер"
        parentId:
          type: integer
          format: int64
          example: 1
        html:
          type: string
          example: "<html> Общая информация о коллайдерах.</html>"
        purpose: 
          type: string
          example: "Рассказать историю появления коллайдера и для чего он нужен"
        modelLinks:
          type: array
          example: ["/user/me/4/1/model1",
            "/user/me/4/1/model2"]
          items:
            type: string
        testLinks:
          type: array
          example: ["/user/me/4/1/test1",
            "/user/me/4/1/test2"]
          items:
            type: string
        links:
          type: array
          example: ["/user/me/4/1",
            "/user/me/4/2"]
          xml:
            wrapped: true
          items:
            type: string
        keyWords:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            example: 'разрез'
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserLogin:
      description: User object
      content:
        application/json:
          schema:
            type: object
            items:
              $ref: '#/components/schemas/UserLogin'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
